// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket
const socket = io();

// –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const elements = {
    votingStatus: document.getElementById('voting-status'),
    uniqueVoters: document.getElementById('unique-voters'),
    votesLogBody: document.getElementById('votes-log-body')
};

let allShifts = [];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
async function init() {
    await loadStatus();
    await loadElectionResults(); // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    await loadVotesLog();
    setupWebSocket();
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
async function loadStatus() {
    try {
        const response = await fetch('/api/status');
        const data = await response.json();
        updateStatus(data);
    } catch (error) {
        console.error('Error loading status:', error);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
function updateStatus(data) {
    const statusMap = {
        'active': { text: '‚úÖ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ', class: 'active' },
        'not_started': { text: '‚è≥ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞—á–∞–ª–æ—Å—å', class: 'not-started' },
        'finished': { text: 'üèÅ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ', class: 'finished' },
        'paused': { text: '‚è∏Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', class: 'paused' }
    };

    const status = statusMap[data.status] || { text: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', class: '' };
    elements.votingStatus.textContent = status.text;
    elements.votingStatus.className = 'status ' + status.class;

    elements.uniqueVoters.textContent = data.uniqueVoters || 0;
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∂—É—Ä–Ω–∞–ª–∞ –≥–æ–ª–æ—Å–æ–≤
async function loadVotesLog() {
    try {
        const response = await fetch('/api/votes/public-log');
        const data = await response.json();

        if (data.success) {
            renderVotesLog(data.votes);
        }
    } catch (error) {
        console.error('Error loading votes log:', error);
        elements.votesLogBody.innerHTML = '<tr><td colspan="5" style="text-align: center; color: red;">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</td></tr>';
    }
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ç–∞–±–ª–∏—Ü—ã –≥–æ–ª–æ—Å–æ–≤
function renderVotesLog(votes) {
    if (votes.length === 0) {
        elements.votesLogBody.innerHTML = '<tr><td colspan="5" style="text-align: center; color: #999;">–ì–æ–ª–æ—Å–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</td></tr>';
        return;
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–∞ –ø–æ ID (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
    votes.sort((a, b) => b.id - a.id);

    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–ª–æ —Ç–∞–±–ª–∏—Ü—ã
    elements.votesLogBody.innerHTML = '';

    votes.forEach(vote => {
        const row = document.createElement('tr');

        const date = new Date(vote.created_at).toLocaleString('ru-RU', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit',
            timeZone: 'Asia/Chita'
        });

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å VK
        let vkProfile = '';
        if (vote.vk_first_name && vote.vk_last_name) {
            const vkName = `${vote.vk_first_name} ${vote.vk_last_name}`;
            const vkLink = `https://vk.com/id${vote.vk_id}`;
            vkProfile = `<a href="${vkLink}" target="_blank" rel="noopener noreferrer">${vkName}</a>`;
        } else {
            vkProfile = '<span style="color: #999;">‚Äî</span>';
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≥–æ–ª–æ—Å–∞
        const status = vote.is_cancelled
            ? '<span class="vote-status cancelled">–ê–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω</span>'
            : '<span class="vote-status counted">–£—á—Ç—ë–Ω</span>';

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã
        row.innerHTML = `
            <td>${vote.id}</td>
            <td>${date}</td>
            <td>${vote.full_name}</td>
            <td>${vkProfile}</td>
            <td>${status}</td>
        `;

        elements.votesLogBody.appendChild(row);
    });
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—ã–±–æ—Ä–æ–≤
async function loadElectionResults() {
    try {
        const response = await fetch('/api/election-results');
        const data = await response.json();

        const resultsSection = document.getElementById('results-section');
        const resultsContainer = document.getElementById('results-container');
        const downloadSection = document.getElementById('download-section');

        if (data.success && data.published) {
            // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö –∏ —Å–µ–∫—Ü–∏—é —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            resultsSection.style.display = 'block';
            downloadSection.style.display = 'block';
            resultsContainer.innerHTML = '';

            data.results.forEach(shiftResult => {
                const shiftDiv = document.createElement('div');
                shiftDiv.className = 'shift-result';

                let winnerHTML = '';
                if (shiftResult.winner) {
                    winnerHTML = `
                        <div class="winner-announcement">
                            <div class="winner-badge">üèÜ</div>
                            <h4>–ü–æ–±–µ–¥–∏—Ç–µ–ª—å</h4>
                            <div class="winner-name">${shiftResult.winner.name}</div>
                            <div class="winner-stats">
                                <div class="winner-stat">
                                    <span class="winner-stat-label">–ì–æ–ª–æ—Å–æ–≤</span>
                                    <span class="winner-stat-value">${shiftResult.winner.vote_count}</span>
                                </div>
                                <div class="winner-stat">
                                    <span class="winner-stat-label">–ü—Ä–æ—Ü–µ–Ω—Ç</span>
                                    <span class="winner-stat-value">${shiftResult.winner.percentage}%</span>
                                </div>
                            </div>
                        </div>
                    `;
                } else {
                    winnerHTML = `
                        <div class="winner-announcement" style="background: linear-gradient(135deg, #e0e0e0 0%, #bdbdbd 100%);">
                            <div class="winner-badge">‚ùì</div>
                            <h4>–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω</h4>
                        </div>
                    `;
                }

                let candidatesHTML = '';
                if (shiftResult.candidates && shiftResult.candidates.length > 0) {
                    candidatesHTML = `
                        <div class="candidates-list">
                            <h5>–í—Å–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã</h5>
                            ${shiftResult.candidates.map((candidate, index) => `
                                <div class="candidate-item">
                                    <div class="candidate-name">
                                        ${index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : '‚Ä¢'} ${candidate.name}
                                    </div>
                                    <div class="candidate-stats-inline">
                                        <span class="candidate-votes">${candidate.vote_count} –≥–æ–ª–æ—Å–æ–≤</span>
                                        <span class="candidate-percentage">${candidate.percentage}%</span>
                                    </div>
                                </div>
                            `).join('')}
                        </div>
                    `;
                }

                let specialVotesHTML = '';
                if (shiftResult.special_votes) {
                    specialVotesHTML = `
                        <div class="special-votes">
                            <h5>–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –≥–æ–ª–æ—Å–∞</h5>
                            <div class="special-votes-grid">
                                <div class="special-vote-item">
                                    <span class="special-vote-label">–ü—Ä–æ—Ç–∏–≤ –≤—Å–µ—Ö</span>
                                    <span class="special-vote-count">${shiftResult.special_votes.against_all}</span>
                                </div>
                                <div class="special-vote-item">
                                    <span class="special-vote-label">–í–æ–∑–¥–µ—Ä–∂–∞–ª—Å—è</span>
                                    <span class="special-vote-count">${shiftResult.special_votes.abstain}</span>
                                </div>
                            </div>
                        </div>
                    `;
                }

                shiftDiv.innerHTML = `
                    <div class="shift-result-header">
                        <h3>${shiftResult.shift.name}</h3>
                        <div class="shift-result-stats">
                            –í—Å–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤: ${shiftResult.stats.total_votes} |
                            –ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–æ: ${shiftResult.stats.unique_voters}
                        </div>
                    </div>
                    ${winnerHTML}
                    ${candidatesHTML}
                    ${specialVotesHTML}
                `;

                resultsContainer.appendChild(shiftDiv);
            });
        } else {
            // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã
            resultsSection.style.display = 'none';
            downloadSection.style.display = 'none';
        }
    } catch (error) {
        console.error('Error loading election results:', error);
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebSocket
function setupWebSocket() {
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    socket.on('stats_update', (data) => {
        elements.uniqueVoters.textContent = data.uniqueVoters || 0;
    });

    // –ù–æ–≤—ã–π –≥–æ–ª–æ—Å - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    socket.on('new_vote', () => {
        loadVotesLog();
    });

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    socket.on('voting_status_changed', (data) => {
        updateStatus(data);
    });

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    socket.on('results_published', () => {
        loadElectionResults();
    });
}

// –§—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏—Ç–æ–≥–æ–≤–æ–π –≤–µ–¥–æ–º–æ—Å—Ç–∏
async function downloadResults() {
    try {
        const response = await fetch('/api/admin/export-votes', {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            }
        });

        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞');
        }

        // –ü–æ–ª—É—á–∞–µ–º blob
        const blob = await response.blob();

        // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å –¥–∞—Ç–æ–π
        const now = new Date();
        const dateStr = now.toISOString().split('T')[0];
        a.download = `–ò—Ç–æ–≥–æ–≤–∞—è_–≤–µ–¥–æ–º–æ—Å—Ç—å_${dateStr}.xlsx`;

        // –¢—Ä–∏–≥–≥–µ—Ä–∏–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
        document.body.appendChild(a);
        a.click();

        // –û—á–∏—â–∞–µ–º
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);

        console.log('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω');
    } catch (error) {
        console.error('Error downloading results:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', init);

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket
const socket = io();

let currentShiftId = null;
let resultsChart = null;

// –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const elements = {
    votingStatus: document.getElementById('voting-status'),
    totalVotes: document.getElementById('total-votes'),
    uniqueVoters: document.getElementById('unique-voters'),
    shiftButtons: document.getElementById('shift-buttons'),
    noShift: document.getElementById('no-shift'),
    candidatesList: document.getElementById('candidates-list'),
    chartContainer: document.querySelector('.chart-container'),
    recentVotes: document.getElementById('recent-votes')
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
async function init() {
    await loadStatus();
    await loadShifts();
    setupWebSocket();
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
async function loadStatus() {
    try {
        const response = await fetch('/api/status');
        const data = await response.json();
        updateStatus(data);
    } catch (error) {
        console.error('Error loading status:', error);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
function updateStatus(data) {
    const statusMap = {
        'active': { text: '‚úÖ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ', class: 'active' },
        'not_started': { text: '‚è≥ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞—á–∞–ª–æ—Å—å', class: 'not-started' },
        'finished': { text: 'üèÅ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ', class: 'finished' },
        'paused': { text: '‚è∏Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', class: 'paused' }
    };

    const status = statusMap[data.status] || { text: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', class: '' };
    elements.votingStatus.textContent = status.text;
    elements.votingStatus.className = 'status ' + status.class;

    elements.totalVotes.textContent = data.totalVotes || 0;
    elements.uniqueVoters.textContent = data.uniqueVoters || 0;
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–º–µ–Ω
async function loadShifts() {
    try {
        const response = await fetch('/api/shifts');
        const data = await response.json();
        renderShifts(data.shifts);
    } catch (error) {
        console.error('Error loading shifts:', error);
    }
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å–º–µ–Ω
function renderShifts(shifts) {
    elements.shiftButtons.innerHTML = '';

    if (shifts.length === 0) {
        elements.shiftButtons.innerHTML = '<p class="no-data">–°–º–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>';
        return;
    }

    shifts.forEach(shift => {
        const button = document.createElement('button');
        button.className = 'shift-btn';
        button.textContent = shift.name;
        button.onclick = () => selectShift(shift.id);
        elements.shiftButtons.appendChild(button);
    });
}

// –í—ã–±–æ—Ä —Å–º–µ–Ω—ã
async function selectShift(shiftId) {
    currentShiftId = shiftId;

    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
    document.querySelectorAll('.shift-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    event.target.classList.add('active');

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç—Ç–æ–π —Å–º–µ–Ω—ã
    socket.emit('subscribe_shift', shiftId);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–º–µ–Ω—ã
    await loadShiftStats(shiftId);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–º–µ–Ω—ã
async function loadShiftStats(shiftId) {
    try {
        const response = await fetch(`/api/shifts/${shiftId}/stats`);
        const data = await response.json();
        renderShiftStats(data);
    } catch (error) {
        console.error('Error loading shift stats:', error);
    }
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–º–µ–Ω—ã
function renderShiftStats(data) {
    elements.noShift.style.display = 'none';
    elements.candidatesList.style.display = 'block';
    elements.chartContainer.style.display = 'block';

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if (data.stats) {
        elements.totalVotes.textContent = data.stats.total_votes || 0;
        elements.uniqueVoters.textContent = data.stats.unique_voters || 0;
    }

    // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    renderCandidates(data.candidates);

    // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    renderChart(data.candidates);

    // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≥–æ–ª–æ—Å–∞
    renderRecentVotes(data.recentVotes);
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
function renderCandidates(candidates) {
    elements.candidatesList.innerHTML = '';

    if (candidates.length === 0) {
        elements.candidatesList.innerHTML = '<p class="no-data">–ö–∞–Ω–¥–∏–¥–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>';
        return;
    }

    candidates.forEach(candidate => {
        const card = document.createElement('div');
        card.className = 'candidate-card';

        const totalVotes = candidate.vote_count || 0;

        card.innerHTML = `
            <div class="candidate-header">
                <div class="candidate-name">${candidate.name}</div>
            </div>
            ${candidate.description ? `<p style="color: #666; margin-bottom: 15px;">${candidate.description}</p>` : ''}
            <div class="candidate-stats">
                <div class="stat-item">
                    <div class="stat-item-label">–ì–æ–ª–æ—Å–æ–≤</div>
                    <div class="stat-item-value" style="font-size: 32px; color: #3498db;">${totalVotes}</div>
                </div>
            </div>
        `;

        elements.candidatesList.appendChild(card);
    });
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
function renderChart(candidates) {
    const ctx = document.getElementById('results-chart');

    if (resultsChart) {
        resultsChart.destroy();
    }

    const labels = candidates.map(c => c.name);
    const voteCounts = candidates.map(c => c.vote_count || 0);

    resultsChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: labels,
            datasets: [
                {
                    label: '–ì–æ–ª–æ—Å–æ–≤',
                    data: voteCounts,
                    backgroundColor: 'rgba(52, 152, 219, 0.8)',
                    borderColor: 'rgba(52, 152, 219, 1)',
                    borderWidth: 2
                }
            ]
        },
        options: {
            responsive: true,
            maintainAspectRatio: true,
            plugins: {
                title: {
                    display: true,
                    text: '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤',
                    font: { size: 16 }
                },
                legend: {
                    display: true,
                    position: 'top'
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        stepSize: 1
                    }
                }
            }
        }
    });
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≥–æ–ª–æ—Å–æ–≤
function renderRecentVotes(votes) {
    if (!votes || votes.length === 0) {
        elements.recentVotes.innerHTML = '<div class="no-data">–ì–æ–ª–æ—Å–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</div>';
        return;
    }

    elements.recentVotes.innerHTML = '';

    votes.forEach(vote => {
        const voteItem = document.createElement('div');
        voteItem.className = 'vote-item';

        const time = new Date(vote.created_at).toLocaleTimeString('ru-RU', {
            hour: '2-digit',
            minute: '2-digit'
        });

        voteItem.innerHTML = `
            <div class="vote-info">
                <div class="vote-nickname">${vote.nickname}</div>
                <div class="vote-candidate">${vote.candidate_name}</div>
            </div>
            <span class="vote-type ${vote.vote_type}">${vote.vote_type === 'for' ? '–ó–ê' : '–ü–†–û–¢–ò–í'}</span>
            <span class="vote-time">${time}</span>
        `;

        elements.recentVotes.appendChild(voteItem);
    });
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebSocket
function setupWebSocket() {
    socket.on('connect', () => {
        console.log('Connected to WebSocket');
    });

    socket.on('new_vote', (data) => {
        console.log('New vote:', data);

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –≥–æ–ª–æ—Å –≤ –ª–µ–Ω—Ç—É
        addNewVoteToFeed(data);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ–∫—É—â–µ–π —Å–º–µ–Ω—ã
        if (currentShiftId) {
            loadShiftStats(currentShiftId);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        loadStatus();
    });

    socket.on('voting_status_change', (data) => {
        console.log('Status changed:', data);
        loadStatus();
    });

    socket.on('disconnect', () => {
        console.log('Disconnected from WebSocket');
    });
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–æ–ª–æ—Å–∞ –≤ –ª–µ–Ω—Ç—É
function addNewVoteToFeed(vote) {
    const voteItem = document.createElement('div');
    voteItem.className = 'vote-item';

    const time = new Date(vote.timestamp).toLocaleTimeString('ru-RU', {
        hour: '2-digit',
        minute: '2-digit'
    });

    voteItem.innerHTML = `
        <div class="vote-info">
            <div class="vote-nickname">${vote.nickname}</div>
            <div class="vote-candidate">${vote.candidateName || ''}</div>
        </div>
        <span class="vote-type ${vote.voteType}">${vote.voteType === 'for' ? '–ó–ê' : '–ü–†–û–¢–ò–í'}</span>
        <span class="vote-time">${time}</span>
    `;

    // –£–¥–∞–ª—è–µ–º "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö" –µ—Å–ª–∏ –µ—Å—Ç—å
    const noData = elements.recentVotes.querySelector('.no-data');
    if (noData) {
        noData.remove();
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
    elements.recentVotes.insertBefore(voteItem, elements.recentVotes.firstChild);

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –≥–æ–ª–æ—Å–æ–≤
    const voteItems = elements.recentVotes.querySelectorAll('.vote-item');
    if (voteItems.length > 20) {
        voteItems[voteItems.length - 1].remove();
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', init);

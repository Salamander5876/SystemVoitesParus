// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket
const socket = io();

// –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const elements = {
    votingStatus: document.getElementById('voting-status'),
    totalVotes: document.getElementById('total-votes'),
    uniqueVoters: document.getElementById('unique-voters'),
    votesLogBody: document.getElementById('votes-log-body')
};

let allShifts = [];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
async function init() {
    await loadStatus();
    await loadVotesLog();
    setupWebSocket();
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
async function loadStatus() {
    try {
        const response = await fetch('/api/status');
        const data = await response.json();
        updateStatus(data);
    } catch (error) {
        console.error('Error loading status:', error);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
function updateStatus(data) {
    const statusMap = {
        'active': { text: '‚úÖ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ', class: 'active' },
        'not_started': { text: '‚è≥ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞—á–∞–ª–æ—Å—å', class: 'not-started' },
        'finished': { text: 'üèÅ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ', class: 'finished' },
        'paused': { text: '‚è∏Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', class: 'paused' }
    };

    const status = statusMap[data.status] || { text: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', class: '' };
    elements.votingStatus.textContent = status.text;
    elements.votingStatus.className = 'status ' + status.class;

    elements.totalVotes.textContent = data.totalVotes || 0;
    elements.uniqueVoters.textContent = data.uniqueVoters || 0;
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∂—É—Ä–Ω–∞–ª–∞ –≥–æ–ª–æ—Å–æ–≤
async function loadVotesLog() {
    try {
        const response = await fetch('/api/votes/public-log');
        const data = await response.json();

        if (data.success) {
            allShifts = data.shifts;
            renderVotesLog(data.votes, data.shifts);
        }
    } catch (error) {
        console.error('Error loading votes log:', error);
        elements.votesLogBody.innerHTML = '<tr><td colspan="6" style="text-align: center; color: red;">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</td></tr>';
    }
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ç–∞–±–ª–∏—Ü—ã –≥–æ–ª–æ—Å–æ–≤
function renderVotesLog(votes, shifts) {
    if (votes.length === 0) {
        elements.votesLogBody.innerHTML = '<tr><td colspan="' + (5 + shifts.length) + '" style="text-align: center; color: #999;">–ì–æ–ª–æ—Å–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</td></tr>';
        return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    const tableHead = document.querySelector('#votes-log-table thead tr');

    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å–º–µ–Ω
    const existingShiftColumns = tableHead.querySelectorAll('.shift-column');
    existingShiftColumns.forEach(col => col.remove());

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å–º–µ–Ω
    shifts.forEach(shiftName => {
        const th = document.createElement('th');
        th.className = 'shift-column';
        th.textContent = `–°–º–µ–Ω–∞ (${shiftName})`;
        tableHead.appendChild(th);
    });

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–∞ –ø–æ ID (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
    votes.sort((a, b) => b.id - a.id);

    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–ª–æ —Ç–∞–±–ª–∏—Ü—ã
    elements.votesLogBody.innerHTML = '';

    votes.forEach(vote => {
        const row = document.createElement('tr');

        const date = new Date(vote.created_at).toLocaleString('ru-RU', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit'
        });

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –∏–∑ VK
        let vkName = '';
        if (vote.vk_first_name && vote.vk_last_name) {
            vkName = `${vote.vk_first_name} ${vote.vk_last_name}`;
        } else {
            vkName = '<span style="color: #999;">‚Äî</span>';
        }

        const vkLink = `https://vk.com/id${vote.vk_id}`;

        // –ë–∞–∑–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        let rowHTML = `
            <td>${vote.id}</td>
            <td>${date}</td>
            <td>${vote.full_name}</td>
            <td>${vkName}</td>
            <td><a href="${vkLink}" target="_blank">${vote.vk_id}</a></td>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Å–º–µ–Ω
        shifts.forEach(shiftName => {
            if (vote.shifts[shiftName]) {
                rowHTML += '<td><span class="vote-status voted">–ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª</span></td>';
            } else {
                rowHTML += '<td><span class="vote-status not-voted">‚Äî</span></td>';
            }
        });

        row.innerHTML = rowHTML;
        elements.votesLogBody.appendChild(row);
    });
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebSocket
function setupWebSocket() {
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    socket.on('stats_update', (data) => {
        elements.totalVotes.textContent = data.totalVotes || 0;
        elements.uniqueVoters.textContent = data.uniqueVoters || 0;
    });

    // –ù–æ–≤—ã–π –≥–æ–ª–æ—Å - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    socket.on('new_vote', () => {
        loadVotesLog();
    });

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    socket.on('voting_status_changed', (data) => {
        updateStatus(data);
    });
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', init);
